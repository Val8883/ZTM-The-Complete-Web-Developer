{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Sticky.js","data/robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","email","id","className","style","height","width","src","alt","CardList","robots","map","robot","key","SearchBox","handleSearchChange","type","placeholder","onChange","Sticky","children","position","top","zIndex","background","App","props","state","searchFiled","bind","fetch","then","res","json","users","setState","catch","error","console","log","value","target","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d4a34b6c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Card({ name, username, email, id }) {\n  return (\n    <li className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img\n        style={{ height: 200, width: 200 }}\n        src={`http://robohash.org/${id}`}\n        alt={`robot${id}`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <h3>{username}</h3>\n        <p>{email}</p>\n      </div>\n    </li>\n  );\n}\n","import React from 'react';\nimport Card from './Card';\n\nexport default function CardList({ robots }) {\n  return (\n    <ul>\n      {robots.map((robot) => (\n        <Card {...robot} key={robot.id} />\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport default function SearchBox({ handleSearchChange }) {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={handleSearchChange}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Sticky({ children }) {\n  return (\n    <div\n      style={{ position: 'sticky', top: 0, zIndex: '2', background: 'inherit' }}\n    >\n      {children}\n    </div>\n  );\n}\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Sticky from '../components/Sticky';\nimport { robots } from '../data/robots';\n\nconst usersUrl = 'https://jsonplaceholder.typicode.com/users';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchFiled: '',\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(usersUrl)\n      .then((res) => res.json())\n      .then((users) => this.setState({ robots: users }))\n      .catch((error) => {\n        console.log(error);\n        this.setState({ robots });\n      });\n  }\n\n  handleSearchChange({ target: { value } }) {\n    this.setState({ searchFiled: value });\n  }\n\n  render() {\n    const { robots, searchFiled } = this.state;\n\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchFiled.toLowerCase())\n    );\n\n    return !robots.length ? (\n      <h1 className='tc f1'>Loading...</h1>\n    ) : (\n      <div className='tc'>\n        <Sticky>\n          <h1 className='f1'>Robofriends</h1>\n          <SearchBox handleSearchChange={this.handleSearchChange} />\n        </Sticky>\n\n        <CardList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}